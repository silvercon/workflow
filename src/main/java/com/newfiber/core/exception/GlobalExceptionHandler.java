package com.newfiber.core.exception;import com.newfiber.core.result.Result;import com.newfiber.core.result.ResultCode;import javax.servlet.http.HttpServletRequest;import lombok.extern.slf4j.Slf4j;import org.springframework.validation.BindingResult;import org.springframework.validation.ObjectError;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;@Slf4j@ResponseBody@ControllerAdvicepublic class GlobalExceptionHandler {    /**     * 参数验证异常     */    @ExceptionHandler(MethodArgumentNotValidException.class)    public Result<Object> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {        Result<Object> result = null;        BindingResult bindingResult = e.getBindingResult();        if (bindingResult.hasErrors()) {            for (ObjectError error : bindingResult.getAllErrors()) {                result = new Result<>(ResultCode.PARA_ERROR, error.getDefaultMessage());                break;            }        }        return result;    }    /**     * 业务异常     */    @ExceptionHandler(BizException.class)    public Result<Object> errorHandler(HttpServletRequest request, BizException e) {        return new Result<>(ResultCode.BIZ_EXCEPTION, e.getErrorCode(), e.getMessage());    }    /**     * 其他异常     */    @ExceptionHandler(Exception.class)    public Result<Object> errorHandler(HttpServletRequest request, Exception e) {        log.error("请求错误信息：{}:{}", e.getMessage(), e.getStackTrace());        return new Result<>(ResultCode.ERROR, ResultCode.ERROR, e.getMessage());    }}